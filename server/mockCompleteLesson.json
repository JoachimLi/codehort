{
  "lesson": {
    "name": "Creating an Express Server From Scratch",
    "summary": "In this lesson, you’ll cover the basics of setting up a node.js server from scratch. With no frameworks, you’ll get to learn what’s really happening with your code under-the-hood. This is the ideal place to start if you’re new to servers.",
    "numberOfTasks": 6
  },
  "solution": {
    "solution": "const express = require('express'); const app = express(); const PORT = 3000; app.listen(PORT, () => { console.log(`Server running at http://localhost:${PORT}`); });",
    "lessonId": 1
  },
  "tasks": [
    {
      "name": "install express",
      "step": 1,
      "explanation": "First things first, we need to install express and import it as a dependency.",
      "lessonId": 1
    },
    {
      "name": "import express",
      "step": 2,
      "explanation": "Now that you’ve installed your dependency, you need to tell your file you want to use it. For this, you can go ahead and write…\n\n”const dependencyname = require(‘dependency’);”",
      "lessonId": 1
    },
    {
      "name": "initialize a new instance of express",
      "step": 3,
      "explanation": "Nice work! Now we need to declare a new constant called app and initialise it to an instance of express, in order to access some of its properties and methods later in the build.",
      "lessonId": 1
    },
    {
      "name": "choose a port",
      "step": 4,
      "explanation": "Great! Now it’s time to decide what port you’d like your server to run on - for this exercise we recommend you use port 3000. Create a new constant called PORT and set it equal to your chosen port.",
      "lessonId": 1
    },
    {
      "name": "listen to your port",
      "step": 5,
      "explanation": "Almost there! Finally we need our app to listen to our port to receive data. To do this, you can use the .listen method on our app to create the following function:\n\napp.listen(YOUR-PORT, () => {})\n\nInsert your port variable and add a fun console.log within the callback function to make sure it’s up and running - we love to see emojis 🚀.\n\nOnce you're done, hit run and see if you can see your message!",
      "lessonId": 1
    },
    {
      "name": "add a link to localhost",
      "step": 6,
      "explanation": "Amazing - you’ve managed to get a basic express server up and running in only 4 steps! 🎉🎉\n\nNow, if you want to make your server even more useful, try adding this little message to your console log:\n\n`Server running at http://localhost:${PORT}🚀`",
      "lessonId": 1
    }
  ],
  "hints": [
    {
      "title": "Install Express",
      "content": "To install express we recommend using npm - the command is ‘npm install express’ - write this in your terminal and see what happens",
      "taskId": 1
    },
    {
      "title": "Import Express",
      "content": "Type this in your code editor:\n\nconst express = require('express');",
      "taskId": 2
    },
    {
      "title": "Initialize a New Instance of Express",
      "content": "Create a constant named 'app', then save an invocation of your express function to 'app'.\n\nLike this: 'const app = express();'",
      "taskId": 3
    },
    {
      "title": "Choose a Port",
      "content": "Ports can be a complicated business, so in terms of this tutorial it’s best to think of them as a place for your server to look for data",
      "taskId": 4
    },
    {
      "title": "Listen to Your Port",
      "content": "Here we need to add where we want our server to listen out - our chosen port.\n\nIn the callback function (squiggly brackets) add a console log. Make it fun, this is what you’ll see when your server is up and running.\n\nTo finally run your code, type 'node index.js' in your terminal and hit RUN.",
      "taskId": 5
    },
    {
      "title": "Add a Link to Localhost",
      "content": "Notice how we use backticks and the ${}? The backticks mean we can insert our javascript variables as template literals. What does this mean? Well, here it means javascript will read it as:\n\n`Server running at http://localhost:3000🚀`\n\nUsing template literals makes your code more modular and saves you from changing your console log if you decide to listen on a different port",
      "taskId": 6
    }
  ],
  "summaries": [
    {
      "title": "summary one",
      "content": "this is the first summary",
      "taskId": 1
    },
    {
      "title": "summary two",
      "content": "this is the second summary",
      "taskId": 1
    }
  ],
  "tests": [
    {
      "regex": "string",
      "message": "string",
      "suggestion": "string",
      "variableRegex": "string",
      "terminalRegex": "string",
      "install": false,
      "taskId": 1
    }
  ]
}
