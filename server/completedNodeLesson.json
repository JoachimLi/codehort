{
  "lesson": {
    "name": "Creating a node.js Server",
    "summary": "In this lesson you’ll learn how to make a server using bare node.js. With no frameworks, or third party help, this is a great place to start if you’re new to servers.",
    "numberOfTasks": 8
  },
  "solution": {
    "solution": "const http = require(‘http’); const PORT = 3000; const server = http.createServer(function (req,res){}); server.listen(PORT, function (error) { if (error){console.log(error)} else {console.log()}})",
    "lessonId": 3
  },
  "tasks": [
    {
      "name": "require http",
      "step": 1,
      "explanation": "To get started, we need to require the http library. To do this, create a const variable called http and require the library.\n\nIn node.js, to require a library you just type the require keyword, followed by the name of the library as follows: (‘http’)",
      "lessonId": 3
    },
    {
      "name": "declare your port",
      "step": 2,
      "explanation": "Next, we need to declare a PORT variable that tells our server where to look. For this exercise we recommend using port 3000.",
      "lessonId": 3
    },
    {
      "name": "create your server",
      "step": 3,
      "explanation": "With that done, we can now create our server. To do this, we’ll declare a const variable called ‘server’ and make use of the createServer method that’s attached to the http library.\n\nTo use this method, set your const equal to ‘http.createServer()’, and we’ll handle the rest in the next task.",
      "lessonId": 3
    },
    {
      "name": "add arguments to your createServer function",
      "step": 4,
      "explanation": "The createServer method takes a single function as it’s argument, which in turn takes both the request and response - shortened to req and res - parameters.\n\nWhat does this mean? Inside the createServer parenthesis, you need to add another function, with the function keyword and arguments of req and res.",
      "lessonId": 3
    },
    {
      "name": "add your port to createServer",
      "step": 5,
      "explanation": "Now we have the server, we need to tell it to listen out for information on a certain port - this is where our PORT variable comes in handy.\n\nTo get the server to work, we have to tell it to ‘listen’. This is actually easier than you think, type ‘server.listen()’",
      "lessonId": 3
    },
    {
      "name": "use your bodyparser",
      "step": 6,
      "explanation": "Almost there! Before we can start our server we need to use the bodyparser we imported. BodyParser is a 'middleware' and has to be initialised before listening to your server.\n\nTo get it working we have to tell our app to ‘use’ it, to do this add ‘app.use(YOUR-DEPENDENCY());’ after your const variables.",
      "lessonId": 2
    },
    {
      "name": "listen to your port and add a link to localhost",
      "step": 7,
      "explanation": "Finally we need our app to ‘listen’ to our port and make sure it’s receiving the data it needs. To do this, you can use the following function:\n\napp.listen(WHERE ARE WE LISTENING?, () => {})\n\nInsert your port variable and add a fun console.log within the callback function to make sure it’s up and running - we love to see emojis 🐨🐨\n\nTo finally run your code, type 'node index.js' in your terminal and hit RUN.",
      "lessonId": 2
    }
  ],
  "hints": [
    {
      "title": "require http",
      "content": "The HTTP interfaces in Node.js are designed to support many features of the protocol and never buffer entire requests or responses, so you can see all the data being passed.",
      "taskId": 14
    },
    {
      "title": "declare your port",
      "content": "Ports can be a complicated business, so in terms of this tutorial it’s best to think of them as a place for your server to look for data",
      "taskId": 15
    },
    {
      "title": "create your server",
      "content": "The createServer method is a method that’s built into the http library. What does this mean? It means we can access it, and http’s other methods, by using http as a keyword, followed by a ‘.’ and the name of the method we want to access.",
      "taskId": 16
    },
    {
      "title": "add arguments to your createServer function",
      "content": "This is a callback function and is only called from within the outer function. This makes it useful for testing, but also ensuring it only gets called under certain conditions.\n\nIt should look like this: const server = http.createServer(function (req,res){})",
      "taskId": 17
    },
    {
      "title": "Choose a Port",
      "content": "Ports can be a complicated business, so in terms of this tutorial it’s best to think of them as a place for your server to look for data",
      "taskId": 11
    },
    {
      "title": "Use Your Bodyparser",
      "content": "Here is the code to use bodyParser:\n\napp.use(bodyParser());",
      "taskId": 12
    },
    {
      "title": "Listen to Your Port and Add a Link to Localhost",
      "content": "Finally we need our app to ‘listen’ to our port and make sure it’s receiving the data it needs. To do this, you can use the following function:\n\napp.listen(WHERE ARE WE LISTENING?, () => {})\n\nInsert your port variable and add a fun console.log within the callback function to make sure it’s up and running - we love to see emojis 🐨🐨",
      "taskId": 13
    }
  ],
  "summaries": [
    {
      "title": "summary one",
      "content": "this is the first summary",
      "taskId": 1
    },
    {
      "title": "summary two",
      "content": "this is the second summary",
      "taskId": 1
    }
  ],
  "tests": [
    {
      "install": false,
      "terminalRegex": null,
      "regex": "\\s*const\\s+\\w+",
      "message": "Error: Expected const declaration",
      "suggestion": "Make sure you use the keyword 'const' to declare your imports",
      "taskId": 14
    },
    {
      "install": false,
      "terminalRegex": null,
      "regex": "\\s*const\\s+[hH]ttp\\s*",
      "message": "Error: No const variable named 'http'",
      "suggestion": "It's convention to name your http import 'http'",
      "taskId": 14
    },
    {
      "install": false,
      "terminalRegex": null,
      "regex": "\\s*const\\s+[hH]ttp\\s*=\\s*require\\('http'\\)\\s*;?\\s*",
      "message": "Error: Expected http package to be imported",
      "suggestion": "Make sure you your http import looks like this: 'const http = require('http')",
      "taskId": 14
    },
    {
      "install": false,
      "terminalRegex": null,
      "regex": "\\s*const\\s+(port|PORT)",
      "message": "Error: No const variable named PORT",
      "suggestion": "Have you named your const variable 'PORT'?",
      "taskId": 15
    },
    {
      "install": false,
      "terminalRegex": null,
      "regex": "\\s*const\\s+(port|PORT)\\s*=\\s*300\\d",
      "message": "Error: Expected PORT to be initialised as 3000",
      "suggestion": "Have you correctly set your port to 3000?",
      "taskId": 15
    },

    {
      "install": false,
      "terminalRegex": null,
      "regex": "\\s*const\\s+(server)",
      "message": "Error: No const variable named 'server'",
      "suggestion": "It's convention to name your consr 'server'",
      "taskId": 16
    },
    {
      "install": false,
      "terminalRegex": null,
      "regex": "\\s*const\\s+(server)\\s*=\\s*[hH]ttp.createServer\\(\\s*\\)",
      "message": "Error: Expected server to be initialised as http.createServer function invocation",
      "suggestion": "Make sure you your server declaration looks like this: 'const server = http.createServer()'",
      "taskId": 16
    },

    {
      "install": false,
      "terminalRegex": null,
      "regex": "\\s*const\\s+(server)\\s*=\\s*[hH]ttp.createServer\\(\\s*\\function\\s*\\(req,res){})",
      "message": "Error: Expected createServer to include empty callback function",
      "suggestion": "Make sure you your createServer declaration looks like this: 'const server = http.createServer(function(req,res){})'",
      "taskId": 17
    },
    {
      "install": false,
      "terminalRegex": null,
      "regex": "\\s*const\\s+(port|PORT)\\s*=\\s*300\\d",
      "message": "Error: Expected PORT to be initialised as 3000",
      "suggestion": "Have you correctly set your port to 3000?",
      "taskId": 11
    },
    {
      "install": false,
      "terminalRegex": null,
      "regex": "\\s*app\\.use\\(",
      "message": "Error: Expected invocation of app.use",
      "suggestion": "Have you used your middleware?\n\nTry 'app.use(CALL YOUR BODYPARSER HERE)'",
      "taskId": 12
    },
    {
      "install": false,
      "terminalRegex": null,
      "regex": "\\s*app\\.use\\(\\s*body[pP]arser\\(\\s*\\)\\s*\\)",
      "message": "Error: Expected first argument of app.use to be 'bodyParser'",
      "suggestion": "have you listed your bodyparser variable as the argument of app.use?",
      "taskId": 12
    },

    {
      "install": false,
      "terminalRegex": null,
      "regex": "\\s*app\\.listen\\(",
      "message": "Error: Expected invocation of app.listen",
      "suggestion": "Is your server listening with 'app.listen()'?",
      "taskId": 13
    },

    {
      "install": false,
      "terminalRegex": null,
      "regex": "\\s*app\\.listen\\(\\s*(port|PORT)\\s*\\)",
      "message": "Error: Expected first argument of app.listen to be 'PORT'",
      "suggestion": "have you listed your PORT variable as the first argument of app.listen?",
      "taskId": 13
    },
    {
      "install": false,
      "terminalRegex": null,
      "regex": "\\s*app\\.listen\\((port|PORT)\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*console\\.log\\(.+\\)\\s*;?\\s*\\}\\s*\\)",
      "message": "Error: Expected second argument of app.listen to be a callback function with only a console log",
      "suggestion": "Read the error message for a hint",
      "taskId": 13
    },
    {
      "install": false,
      "terminalRegex": null,
      "regex": "\\s*app\\.listen\\((port|PORT)\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*console\\.log\\(.+http://localhost:\\$\\{\\s*(port|PORT)\\s*\\}.+\\)\\s*;?\\s*\\}\\s*\\)",
      "message": "Error: Expected reference to correct port",
      "suggestion": "make sure your console log includes 'http://localhost:${PORT}'",
      "taskId": 13
    }
  ]
}
